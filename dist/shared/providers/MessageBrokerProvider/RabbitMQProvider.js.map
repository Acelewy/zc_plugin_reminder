{"version":3,"sources":["../../../../src/shared/providers/MessageBrokerProvider/RabbitMQProvider.js"],"names":["require","config","MessageBrokerProvider","init","amqpUrl","connection","Error","amqp","connect","channel","createChannel","isEventBusInitialized","close","getChannel","getConnection","emit","exchange","event","data","options","assertExchange","message","Buffer","from","publish","queue","queueName","assertQueue","durable","sendToQueue","persistent","on","callback","exclusive","bindQueue","consume","noAck","limit","prefetch","acknowledgeMessage","ack","rejectMessage","requeue","nack"],"mappings":"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","sourcesContent":["/**\r\n    Copyright 2021, Zuri plugin reminder.\r\n    All rights reserved.\r\n    Written By: King Etiosasere, 30th August 2021\r\n* */\r\n\r\nimport amqp from 'amqplib'\r\n\r\nrequire('dotenv').config()\r\n\r\n/**\r\n * @description :: RabbitMQ class for handling all rabbitmq connections\r\n */\r\n\r\nclass MessageBrokerProvider {\r\n\tasync init(amqpUrl) {\r\n\t\tif (this.connection) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (!amqpUrl) {\r\n\t\t\tthrow new Error('Rabbitmq connection string not found')\r\n\t\t}\r\n\t\tthis.connection = await amqp.connect(amqpUrl)\r\n\t\tthis.channel = await this.connection.createChannel()\r\n\t\treturn true\r\n\t}\r\n\r\n\tisEventBusInitialized() {\r\n\t\tif (!this.connection || !this.channel) {\r\n\t\t\tthrow new Error('Connection not initialized')\r\n\t\t}\r\n\t}\r\n\r\n\tasync close() {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tawait this.connection.close()\r\n\t}\r\n\r\n\tgetChannel() {\r\n\t\tthis.isEventBusInitialized()\r\n\t\treturn this.channel\r\n\t}\r\n\r\n\tgetConnection() {\r\n\t\tthis.isEventBusInitialized()\r\n\t\treturn this.connection\r\n\t}\r\n\r\n\t/**\r\n\t * @description :: Emits an event via the passed-on `exchange`, works as a pub-sub\r\n\t * @param exchange\r\n\t * @param event\r\n\t * @param data\r\n\t * @param options\r\n\t * @returns {Promise<boolean>}\r\n\t */\r\n\r\n\tasync emit(exchange, event, data, options) {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tawait this.channel.assertExchange(exchange, 'topic')\r\n\t\tconst message = Buffer.from(JSON.stringify(data))\r\n\t\treturn this.channel.publish(exchange, event, message, options)\r\n\t}\r\n\r\n\tasync queue(queueName, data, options) {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tawait this.channel.assertQueue(queueName, { durable: true })\r\n\t\tconst message = Buffer.from(JSON.stringify(data))\r\n\t\treturn this.channel.sendToQueue(queueName, message, {\r\n\t\t\tpersistent: true,\r\n\t\t\t...options,\r\n\t\t})\r\n\t}\r\n\r\n\tasync on(exchange, event, callback) {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tawait this.channel.assertExchange(exchange, 'topic')\r\n\t\tconst { queue } = await this.channel.assertQueue('', {\r\n\t\t\texclusive: true,\r\n\t\t})\r\n\t\tawait this.channel.bindQueue(queue, exchange, event)\r\n\t\treturn this.channel.consume(queue, callback, {\r\n\t\t\tnoAck: true,\r\n\t\t})\r\n\t}\r\n\r\n\tasync consume(queueName, callback, limit, options) {\r\n\t\tthis.isEventBusInitialized()\r\n\r\n\t\t// limit the number of concurrent jobs\r\n\t\tthis.channel.prefetch(limit)\r\n\t\tawait this.channel.assertQueue(queueName, { durable: true })\r\n\t\treturn this.channel.consume(queueName, callback, options)\r\n\t}\r\n\r\n\tacknowledgeMessage(message) {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tthis.channel.ack(message)\r\n\t}\r\n\r\n\trejectMessage(message, requeue) {\r\n\t\tthis.isEventBusInitialized()\r\n\t\tthis.channel.nack(message, false, requeue)\r\n\t}\r\n}\r\n\r\nexport default new MessageBrokerProvider()\r\n"],"file":"RabbitMQProvider.js"}